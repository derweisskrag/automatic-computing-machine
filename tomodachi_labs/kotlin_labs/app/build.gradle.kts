/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Add the JMH plugin
    id("me.champeau.jmh") version "0.7.2"


    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    jmh("org.openjdk.jmh:jmh-core:1.37")
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:1.37")
    

    // The function you want to benchmark is in your main source set
    // implementation(project())
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.0")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.AppKt"
}


// Configure the JMH
jmh {
    // jmhInclude = listOf(".*MyBenchmark.*") 
    // include = listOf(".*MyBenchmark.*")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE



    // Use the main source set for benchmarks
    // Assign properties directly within the configuration block
    fork = 1
    iterations = 5
    warmupIterations = 5
    benchmarkMode = listOf("avgt") // Corrected line
}

// After the plugin has been applied, configure the JMH tasks.
// tasks.withType<org.gradle.api.tasks.JavaExec>().configureEach {
//     if (name.startsWith("jmh")) {
//         // isCompatibleWithConfigurationCache.set(false)
//         isCompatibleWithConfigurationCache = false
//     }
// }